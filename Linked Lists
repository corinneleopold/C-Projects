#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
//
struct ListNode {
    int value;
    struct ListNode * next;
};
typedef struct ListNode ListNode;
struct LinkedList {
    ListNode * head;
};
typedef struct LinkedList LinkedList;
//
// Initialize a linked list
//
void llist_init(LinkedList * list) {
    list->head = NULL;
}
//
// Adds value to beginning of list
//
void llist_add(LinkedList * list, int value) {
    ListNode * n = (ListNode *) malloc(sizeof(ListNode));
    n->value = value;
    n->next = list->head;
    list->head = n;
}
//
// Checks to see if the value exists in the list
//
int llist_exists(LinkedList * list, int value) {
    ListNode * e;
    e = list->head;
    while (e != NULL) {
    if (e->value == value)
        return 1;
    e = e->next;
    }
}
//
// Removes the first entry in the list and puts value in *value. It also frees memory allocated for the node
//
int llist_remove_first(LinkedList * list, int * value) {
    ListNode * current = list->head;
    int returnVal = 0;
    if (current != NULL) {
        *value = current->value;
        list->head = current->next;
        current = list->head;
        returnVal = 1;
    }
    while (current != NULL) {
        current = current->next;
    }
    free(current);
    return returnVal;
}
//
// Removes the last entry in the list and puts value in *value. It also frees memory allocated for node.
//
int llist_remove_first(LinkedList * list, int * value) {
ListNode * current = list->head;
int returnVal = 0;
if (current != NULL) {
*value = current->value;
list->head = current->next;
current = list->head;
returnVal = 1;
}
while (current != NULL) {
current = current->next;
}
free(current);
return returnVal;
}
//
// Stores in *value the value that correspond to the ith entry. Returns 1 if success or 0 if there is no ith entry.
//
int llist_get_ith(LinkedList * list, int ith, int * value) {
    ListNode * e = list->head;
    int n = 0;
    while (e != NULL) {
        if (ith == n) {
            *value = e->value;
            return 1;
        }
        e = e->next;
        n++;
    }
    return 0;
}
//
// Saves the list in a file
//
int llist_save(LinkedList * list, char * file_name) {
    ListNode * current = list->head;
    FILE *f;
    f = fopen(file_name, "w");
    if (f == NULL) {
       return 0;
    }
    while (current != NULL) {
        fprintf(f, "%d\n", current->value);
        current = current->next;
    }
    fclose(f);
    return 0;
}
//
// Sorts the list in ascending order
//
void llist_sort(LinkedList * list) {
    ListNode * current = list->head;
    ListNode * other = NULL;
    int flag = 1;
    do {
        flag = 0;
        current = list->head;
        while (current->next != NULL) {
            if (current->value > current->next->value) {
                int temp = current->value;
                current->value = current->next->value;
                current->next->value = temp;
                flag = 1;
            }
            current = current->next;
        }
    } while (flag);
}
//
// Removes the ith entry from the list. Returns 1 if success or 0 if there is no ith entry.
//
int llist_remove_ith(LinkedList * list, int ith) {
    ListNode * current = list->head;
    ListNode * previous = NULL;
    int n = 0;
    while (current != NULL) {
        if (ith == n) {
            previous->next = current->next;
            return 1;
        }
        previous = current;
        current = current->next;
        n++;
    }
    return 0;
}
//
// Inserts a value at the beginning of the list.
//
void llist_insert_first(LinkedList * list, int value) {
    ListNode * current = (ListNode *)malloc(sizeof(ListNode));
    current->value = value;
    current->next = list->head;
    list->head = current;
}
//
// Inserts a value at the end of the list.
//
void llist_insert_last(LinkedList * list, int value) {
    ListNode * current = (ListNode *)malloc(sizeof(ListNode));
    ListNode * last;
    if (list->head != NULL)
        last = list->head;
        current->value = value;
        current->next = NULL;
        if (llist_number_elements(list) == 0) {
           llist_insert_first(list, value);
    }
    else {
        while (last->next != NULL) {
        last = last->next;
    }
    last->next = current;
    }
}
//
// Clears all elements in the list and free the nodes
//
void llist_clear(LinkedList *list) {
    ListNode * current = list->head;
    ListNode * next = NULL;
    while (current != NULL) {
          next = current->next;
          free(current);
          current = next;
    } 
    list->head = NULL;
}
//
// Prints the elements in the list
//
void llist_print(LinkedList * list) {
    ListNode * e;
    if (list->head == NULL) {
        printf("{EMPTY}\n");
        return;
    }
    printf("{");
    e = list->head;
    while (e != NULL) {
        printf("%d", e->value);
        e = e->next;
        if (e!=NULL)
          printf(", ");
    }
    printf("}\n");
}
//
// Lists the number of elements in the list
//
int llist_number_elements(LinkedList * list) {
        ListNode * e = list->head;
        int n = 0;
        while (e != NULL) {
                e = e->next;
                n++;
        }
        return n;
}
